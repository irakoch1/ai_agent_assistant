import logging
import asyncio
import os
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, Bot
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from flask import Flask, jsonify
from threading import Thread
 
from config import Config
from database import db
from llm_client import LLMClient
from models import LLMResponse
from scheduler import scheduler_instance
import re
 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
llm_client = LLMClient()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"], ["/clear"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¢–µ–ª–µ–≥—Ä–∞–º-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–±—ã—Ç–∏–π!",
        reply_markup=reply_markup,
    )

    await send_welcome_description(update)

async def send_welcome_description(update: Update):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞"""
    description = """
üìã –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:

‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
"–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15"
"—Å–µ–≥–æ–¥–Ω—è –≤ 19.00 –ø—Ä–æ–±–µ–∂–∫–∞" 
"–∑–∞–≤—Ç—Ä–∞ –Ω—É–∂–Ω–æ –ø–æ–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å"
"–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –Ω–∞–¥–æ –ø–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É"

üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ü–µ–ª—å ‚Äî –∫–æ–º–∞–Ω–¥–∞ /goal, –Ω–∞–ø—Ä–∏–º–µ—Ä:
/goal –≤—ã—É—á–∏—Ç—å 100 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∑–∞ 30 –¥–Ω–µ–π

üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª

‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç ¬´–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª

üóëÔ∏è –£–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏: "—É–¥–∞–ª–∏ –ø—Ä–æ–±–µ–∂–∫–∞ –∑–∞–≤—Ç—Ä–∞"

üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /clear

‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ 10:00 —É—Ç—Ä–∞
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å –¥–æ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Å –≤—Ä–µ–º–µ–Ω–µ–º)

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å! üöÄ
"""
    await update.message.reply_text(description)

async def clear_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    try:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [["‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–°–Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=reply_markup,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data["awaiting_clear_confirmation"] = True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")


async def handle_clear_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    user_id = update.effective_user.id
    user_text = update.message.text

    if user_text == "‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å":
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            deleted_count = db.clear_user_events(user_id)

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–æ! –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π.",
                reply_markup=reply_markup,
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            context.user_data.pop("awaiting_clear_confirmation", None)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
            )

    elif user_text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞":
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "‚ùå –û—á–∏—Å—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_markup
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data.pop("awaiting_clear_confirmation", None)

async def debug_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        events = db.get_user_events(user_id, datetime.now() - timedelta(days=30), datetime.now() + timedelta(days=30))
        
        if not events:
            await update.message.reply_text("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            # –ü–æ–∫–∞–∂–µ–º —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                query = f"SELECT * FROM users WHERE user_id = %s"
                with db.conn.cursor() as cur:
                    cur.execute(query, (user_id,))
                    user = cur.fetchone()
                    if user:
                        await update.message.reply_text(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID={user[0]}, –ò–º—è={user[1]}")
                    else:
                        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users")
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                
        else:
            message = "üìä –°–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
            for event in events:
                start_time = event[2].strftime("%Y-%m-%d %H:%M") if event[2] else "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"
                end_time = event[3].strftime("%Y-%m-%d %H:%M") if event[3] else "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"
                message += f"ID: {event[0]}, –û–ø–∏—Å–∞–Ω–∏–µ: {event[1]}, –ù–∞—á–∞–ª–æ: {start_time}, –ö–æ–Ω–µ—Ü: {end_time}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {event[4]}, –í–µ—Å—å –¥–µ–Ω—å: {event[5]}\n"
            
            await update.message.reply_text(message[:4000])
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

async def goal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /goal"""
    await update.message.reply_text("–ö–∞–∫—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: '–í—ã—É—á–∏—Ç—å 100 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∑–∞ 30 –¥–Ω–µ–π' –∏–ª–∏ '–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π'.")
    context.user_data['awaiting_goal'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏
        if context.user_data.get("awaiting_clear_confirmation"):
            await handle_clear_confirmation(update, context)
            return

        if context.user_data.get('awaiting_goal'):
            await handle_goal_creation(update, context)
            return

        if context.user_data.get('awaiting_goal_confirmation'):
            await handle_goal_confirmation(update, context)
            return

        if user_text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await show_schedule(update, context)
        elif user_text == "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        elif user_text == "/clear":
            await clear_schedule(update, context)
        elif user_text == "/debug":
            await debug_db(update, context)
        elif llm_client.is_delete_command(user_text):
            await handle_delete_event(update, user_id, user_text)
        else:
            await process_natural_language(update, user_text, user_id, username, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_goal_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏"""
    goal_description = update.message.text
    context.user_data['goal_description'] = goal_description
    context.user_data['awaiting_goal'] = False

    # –ü—Ä–µ–∂–¥–µ —á–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–π
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å —Ü–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é LLM
        is_meaningful = llm_client.is_meaningful_goal(goal_description)
        
        if not is_meaningful:
            await update.message.reply_text(
                "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ü–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. "
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤—ã—É—á–∏—Ç—å 100 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∑–∞ 30 –¥–Ω–µ–π' –∏–ª–∏ '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑–∞ 2 –º–µ—Å—è—Ü–∞'."
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å
            context.user_data.pop('goal_description', None)
            context.user_data['awaiting_goal'] = True
            return
        
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ —Ü–µ–ª—å: '{goal_description}'. –Ø —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø–ª–∞–Ω–æ–º –¥–ª—è –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")

        plan = llm_client.generate_training_plan(goal_description)

        if not plan:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–µ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
            return

        context.user_data['generated_plan'] = plan
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–ª–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Ü–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ü–µ–ª—å –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–≤—ã—É—á–∏—Ç—å 100 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∑–∞ 30 –¥–Ω–µ–π' –∏–ª–∏ '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É –∑–∞ 2 –º–µ—Å—è—Ü–∞'."
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ü–µ–ª—å
        context.user_data.pop('goal_description', None)
        context.user_data['awaiting_goal'] = True
        return

    plan_text = "–í–æ—Ç –º–æ–π –ø–ª–∞–Ω:\n\n"
    for event in plan:
        plan_text += f"- {event['date']}: {event['description']}\n"

    keyboard = [["‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(plan_text, reply_markup=reply_markup)

    context.user_data['awaiting_goal_confirmation'] = True


async def handle_goal_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ü–µ–ª–∏"""
    if 'awaiting_goal_confirmation' in context.user_data:
        context.user_data.pop('awaiting_goal_confirmation', None)
    else:
        return

    user_text = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name

    keyboard = [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"], ["/clear"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if user_text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å":
        plan = context.user_data.get('generated_plan', [])
        goal_description = context.user_data.get('goal_description')

        if not plan or not goal_description:
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=reply_markup)
        else:
            # Save the goal
            goal_id = db.save_goal(user_id, goal_description, 2) # priority = 2 (default)

            for event in plan:
                llm_response = LLMResponse(
                    date=event['date'],
                    time="???",
                    description=event['description'],
                    priority=2,
                    original_text=event['description']
                )
                # Pass goal_id to process_event
                await asyncio.to_thread(scheduler_instance.process_event, user_id, llm_response, username, goal_id)
            
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=reply_markup)
            context.user_data.pop('generated_plan', None)
            context.user_data.pop('goal_description', None)

    elif user_text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å":
        await update.message.reply_text("–ü–æ–Ω—è–ª, –ø–ª–∞–Ω –Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=reply_markup)
        context.user_data.pop('generated_plan', None)
        context.user_data.pop('goal_description', None)


async def process_natural_language(
    update: Update, text: str, user_id: int, username: str, context: ContextTypes.DEFAULT_TYPE
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-—è–∑—ã–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å LLM"""
    try:
        logger.info(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: '{text}'")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é LLM
        llm_response = llm_client.extract_event_info(text)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è, –Ω–æ –Ω–µ—Ç —è–≤–Ω–æ–π –¥–∞—Ç—ã ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        text_lower = text.lower()
        has_explicit_date = (
            re.search(r"\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞)\b", text_lower)
            or re.search(r"\b(—è–Ω–≤–∞—Ä|—Ñ–µ–≤—Ä–∞–ª|–º–∞—Ä—Ç|–∞–ø—Ä–µ–ª|–º–∞[–πi]|–∏—é–Ω|–∏—é–ª|–∞–≤–≥—É—Å—Ç|—Å–µ–Ω—Ç—è–±—Ä|–æ–∫—Ç—è–±—Ä|–Ω–æ—è–±—Ä|–¥–µ–∫–∞–±—Ä)\w*\b", text_lower)
            or re.search(r"\b\d{4}-\d{2}-\d{2}\b", text_lower)
            or re.search(r"\b\d{1,2}[./-]\d{1,2}(?:[./-]\d{2,4})?\b", text_lower)
        )
        has_time = re.search(r"\b\d{1,2}([:.]\d{2})?\b", text_lower) is not None or any(
            w in text_lower for w in ["—á–∞—Å", "—á–∞—Å–æ–≤"]
        )
        last_date = context.user_data.get("last_date") if hasattr(context, "user_data") else None
        if not has_explicit_date and has_time and last_date and llm_response.time != "???":
            llm_response.date = last_date
        logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: date={llm_response.date}, time='{llm_response.time}', desc='{llm_response.description}'")
        logger.info(f"üîç –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {'–ë–ï–ó –í–†–ï–ú–ï–ù–ò' if llm_response.time == '???' else '–° –í–†–ï–ú–ï–ù–ï–ú'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        has_event = llm_response.description and llm_response.description.strip() and llm_response.description != "???"

        if has_event:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                result = scheduler_instance.process_event(user_id, llm_response, username)
                logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {result}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                if result.get("success", False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
                    event_exists = db.check_event_exists(user_id, llm_response.description, llm_response.date)
                    logger.info(f"üîç –°–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: {event_exists}")
                    
                    if not event_exists:
                        logger.error("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!")
                        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                        return

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                response_data = {
                    "description": llm_response.description,
                    "time": llm_response.time,
                    "end_time": llm_response.end_time,
                    "date": llm_response.date,
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if not result["success"]:
                    response_data.update(result.get("conflict_data", {}))

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                if result["success"]:
                    human_response = llm_client.generate_human_response(
                        response_data, conflict=False, user_text=text
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
                    human_response = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                
                await update.message.reply_text(human_response)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
                if hasattr(context, "user_data") and llm_response.date and has_explicit_date:
                    context.user_data["last_date"] = llm_response.date
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
                # Fallback –æ—Ç–≤–µ—Ç
                if llm_response.time == "???":
                    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å: {llm_response.description} –Ω–∞ {llm_response.date}")
                else:
                    await update.message.reply_text(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {llm_response.description} –Ω–∞ {llm_response.date} –≤ {llm_response.time}")
                    
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            human_response = llm_client.generate_human_response(
                {}, conflict=False, user_text=text
            )
            await update.message.reply_text(human_response)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π fallback
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
            today = datetime.now()
            if "–∑–∞–≤—Ç—Ä–∞" in text.lower():
                date_str = (today + timedelta(days=1)).strftime("%Y-%m-%d")
            else:
                date_str = today.strftime("%Y-%m-%d")
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description = re.sub(r'(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–≤\s+\d+[:.]?\d*)', '', text, flags=re.IGNORECASE)
            description = re.sub(r'\s+', ' ', description).strip()
            
            if not description:
                description = text
                
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {description} –Ω–∞ {date_str}")
            
        except Exception as fallback_error:
            logger.error(f"‚ùå Fallback —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00' –∏–ª–∏ '–∑–∞–≤—Ç—Ä–∞ –Ω—É–∂–Ω–æ –ø–æ–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å'"
            )


async def handle_delete_event(update: Update, user_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞—Ç—É)
        delete_info = llm_client.extract_delete_intent(text)

        event_description = ""
        event_date = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è
        if delete_info and delete_info.get('intent') == 'delete':
            event_description = delete_info.get('description', '').strip()
            event_date = delete_info.get('date', None)
        else:
            # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            event_description = llm_client.extract_event_from_delete(text).strip()

        if not event_description or len(event_description) < 2:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '—É–¥–∞–ª–∏ –ø–ª–∞–≤–∞–Ω–∏–µ' –∏–ª–∏ '—É–¥–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–≤—Ç—Ä–∞'"
            )
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ (—Å –¥–∞—Ç–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞)
        success = db.delete_event(user_id, event_description, event_date)

        if success:
            if event_date:
                await update.message.reply_text(
                    f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event_description}' –Ω–∞ {event_date} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!"
                )
            else:
                await update.message.reply_text(
                    f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event_description}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!"
                )
        else:
            if event_date:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ '{event_description}' –Ω–∞ {event_date}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –¥–∞—Ç—ã."
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ '{event_description}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è."
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
        past_date = datetime.now() - timedelta(days=365)
        future_date = datetime.now() + timedelta(days=365)

        events = db.get_user_events(user_id, past_date, future_date)
        logger.info(f"–í—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î: {events}")

        if not events:
            await update.message.reply_text(
                "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!"
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ)
        current_time = datetime.now()
        future_events = []

        for event in events:
            event_time = event[2]
            is_all_day = event[5]
            
            # –î–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–∞—Ç–∞ >= —Å–µ–≥–æ–¥–Ω—è
            if is_all_day or event_time is None:
                # –î–ª—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                if event_time is not None:
                    event_date = event_time.date()
                else:
                    # –ï—Å–ª–∏ event_time None, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ fallback
                    # –ù–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å–æ–±—ã—Ç–∏—è
                    # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ fallback, –Ω–æ —ç—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ
                    # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å today(), –Ω–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É
                    event_date = datetime.now().date()
                if event_date >= current_time.date():
                    future_events.append(event)
            else:
                # –î–ª—è —Å–æ–±—ã—Ç–∏–π —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
                if event_time >= current_time:
                    future_events.append(event)

        if not future_events:
            await update.message.reply_text(
                "üìÖ –í—Å–µ –≤–∞—à–∏ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∏! –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–µ."
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º
        events_by_date = {}
        # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è ("–≤ 9", "08:30", "8.30", –∏ —Ç.–ø.)
        time_prefix_re = re.compile(r"^\s*(–≤\s*)?([01]?\d|2[0-3])([:.]\d{2})?\s*[-‚Äî:]?\s*", re.IGNORECASE)
        for event in future_events:
            event_id, event_description, start_time, end_time, event_priority, is_all_day = event
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
            if start_time:
                event_date = start_time.strftime("%d.%m.%Y")
            else:
                event_date = datetime.now().strftime("%d.%m.%Y")

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ —É–±—Ä–∞–Ω—ã

            if is_all_day:
                # –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
                if event_date not in events_by_date:
                    events_by_date[event_date] = []
                events_by_date[event_date].append(f"‚Ä¢ –í–µ—Å—å –¥–µ–Ω—å - {event_description}")
            else:
                # –°–æ–±—ã—Ç–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
                if end_time and end_time > start_time and end_time.date() == start_time.date():
                    event_time_str = f"{start_time.strftime('%H:%M')}‚Äì{end_time.strftime('%H:%M')}"
                else:
                    event_time_str = start_time.strftime("%H:%M")
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                event_description = time_prefix_re.sub("", event_description).strip()
                # –£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "—Å .. –¥–æ .." –≤ –Ω–∞—á–∞–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                event_description = re.sub(r"^\s*—Å\s*\d{1,2}([:.]\d{2})?\s*(—É—Ç—Ä–∞|—É—Ç—Ä–æ–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–≤–µ—á–µ—Ä|–Ω–æ—á–∏|–Ω–æ—á—å—é)?\s*(–¥–æ|‚Äì|-|‚Äî)\s*\d{1,2}([:.]\d{2})?\s*(—É—Ç—Ä–∞|—É—Ç—Ä–æ–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–≤–µ—á–µ—Ä|–Ω–æ—á–∏|–Ω–æ—á—å—é)?\s*", "", event_description, flags=re.IGNORECASE).strip()
                if event_date not in events_by_date:
                    events_by_date[event_date] = []
                events_by_date[event_date].append(f"‚Ä¢ {event_time_str} - {event_description}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_text = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è):\n\n"

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        sorted_dates = sorted(
            events_by_date.keys(), key=lambda x: datetime.strptime(x, "%d.%m.%Y")
        )

        for date in sorted_dates:
            schedule_text += f"üìÜ {date}:\n"
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
            for event in events_by_date[date]:
                schedule_text += f"  {event}\n"
            
            schedule_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–±—ã—Ç–∏–π
        schedule_text += f"–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(future_events)}"

        # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(schedule_text) > 4000:
            parts = [
                schedule_text[i : i + 4000] for i in range(0, len(schedule_text), 4000)
            ]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(schedule_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            simple_events = db.get_user_events(user_id, datetime.now() - timedelta(days=1), datetime.now() + timedelta(days=30))
            logger.info(f"–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª: {simple_events}")
            
            if simple_events:
                simple_text = "üìÖ –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n"
                for event in simple_events:
                    event_desc = event[1] if len(event) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"
                    event_time = event[2] if len(event) > 2 and event[2] else "–ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏"
                    simple_text += f"‚Ä¢ {event_desc} - {event_time}\n"
                await update.message.reply_text(simple_text)
            else:
                await update.message.reply_text("üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!")
        except Exception as simple_e:
            logger.error(f"–î–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {simple_e}")
            await update.message.reply_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {str(e)[:200]}")


async def post_init(application: Application):
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_instance.set_bot(application.bot)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    scheduler_instance.start()
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_schedule))
    application.add_handler(CommandHandler("goal", goal_command))
    application.add_handler(CommandHandler("debug", debug_db))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º post-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    application.post_init = post_init


def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling"""
    application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clear", clear_schedule))
    application.add_handler(CommandHandler("goal", goal_command))
    application.add_handler(CommandHandler("debug", debug_db))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º post-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    application.post_init = post_init

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")


# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    return jsonify({"status": "healthy", "message": "Telegram bot is running"}), 200

@flask_app.route('/health')
def detailed_health():
    return jsonify({"status": "ok"}), 200


def main():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    import os
    
    port = int(os.environ.get('PORT', 8000))
    
    def run_flask():
        flask_app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()


if __name__ == "__main__":
    main()


