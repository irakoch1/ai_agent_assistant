from datetime import datetime, timedelta
from database import db
from models import LLMResponse, EventConflict
from typing import Dict, Any
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from telegram import Bot
from config import Config
import asyncio
import logging
import re

logger = logging.getLogger(__name__)


class Scheduler:
    def __init__(self):
        self.scheduler = AsyncIOScheduler(timezone=Config.TIMEZONE)
        self.bot = None
        
    def set_bot(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.bot = bot
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ 10:00
            self.scheduler.add_job(
                self.send_daily_schedule,
                CronTrigger(hour=10, minute=0, timezone=Config.TIMEZONE),
                id='daily_schedule'
            )
            
            self.scheduler.start()
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def send_daily_schedule(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ 10:00"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.get_all_users()
            
            for user_id in users:
                try:
                    await self.send_user_daily_schedule(user_id)
                    await asyncio.sleep(0.1)  # –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_schedule: {e}")
    
    async def send_user_daily_schedule(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().date()
            start_of_day = datetime.combine(today, datetime.min.time())
            end_of_day = datetime.combine(today, datetime.max.time())
            
            events = db.get_user_events(user_id, start_of_day, end_of_day)
            
            if not events:
                # –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                message = "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû"
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏
                message = "üìÖ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                time_prefix_re = re.compile(r"^\s*(–≤\s*)?([01]?\d|2[0-3])([:.]\d{2})?\s*[-‚Äî:]?\s*", re.IGNORECASE)
                
                for event in events:
                    event_id, event_description, start_time, end_time, event_priority, is_all_day = event
                    
                    if is_all_day:
                        event_time_str = "üìÖ –í–µ—Å—å –¥–µ–Ω—å"
                    else:
                        event_time_str = start_time.strftime("%H:%M")
                        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —à–∞–±–ª–æ–Ω –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
                        event_description = time_prefix_re.sub("", event_description).strip()
                        event_description = re.sub(r"^\s*—Å\s*\d{1,2}([:.]\d{2})?\s*(—É—Ç—Ä–∞|—É—Ç—Ä–æ–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–≤–µ—á–µ—Ä|–Ω–æ—á–∏|–Ω–æ—á—å—é)?\s*(–¥–æ|‚Äì|-|‚Äî)\s*\d{1,2}([:.]\d{2})?\s*(—É—Ç—Ä–∞|—É—Ç—Ä–æ–º|–¥–Ω—è|–≤–µ—á–µ—Ä–∞|–≤–µ—á–µ—Ä|–Ω–æ—á–∏|–Ω–æ—á—å—é)?\s*", "", event_description, flags=re.IGNORECASE).strip()
                    
                    message += f"‚Ä¢ {event_time_str} - {event_description}\n"
                
                message += "\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üöÄ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(chat_id=user_id, text=message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    def schedule_event_notification(self, user_id: int, event_id: int, event_time: datetime):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ —Å–æ–±—ã—Ç–∏—è"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö")
            return
            
        try:
            # –î–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            event = db.get_event_by_id(event_id)
            if event and event[5]:  # event[5] - —ç—Ç–æ is_all_day
                logger.info(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ {event_id} –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è")
                return
                
            # –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∑–∞ —á–∞—Å –¥–æ —Å–æ–±—ã—Ç–∏—è
            notification_time = event_time - timedelta(hours=1)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º
            if notification_time <= datetime.now():
                return
                
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.scheduler.add_job(
                self.send_event_reminder,
                DateTrigger(run_date=notification_time, timezone=Config.TIMEZONE),
                args=[user_id, event_id],
                id=f'event_reminder_{event_id}'
            )
            
            logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –≤ {notification_time}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_event_reminder(self, user_id: int, event_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            event = db.get_event_by_id(event_id)
            
            if event and not event[5]:  # event[5] - —ç—Ç–æ is_all_day, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
                event_time = event[2].strftime("%H:%M")
                event_description = event[1]
                
                message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n–ß–µ—Ä–µ–∑ —á–∞—Å —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:\n‚Ä¢ {event_time} - {event_description}\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ! üìã"
                
                await self.bot.send_message(chat_id=user_id, text=message)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ —Å–æ–±—ã—Ç–∏–∏ {event_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    def cancel_event_notification(self, event_id: int):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            job_id = f'event_reminder_{event_id}'
            if self.scheduler.get_job(job_id):
                self.scheduler.remove_job(job_id)
                logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    @staticmethod
    def process_event(
        user_id: int, llm_response: LLMResponse, username: str, goal_id: int = None
    ) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.user_exists(user_id, username)

        # –í–†–ï–ú–ï–ù–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        logger.info("‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        conflict = EventConflict(is_conflict=False)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ (???), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
        if llm_response.time == "???":
            logger.info(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å: '{llm_response.description}' –Ω–∞ {llm_response.date}")

            try:
                # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è
                start_time = datetime.strptime(f"{llm_response.date} 00:00:00", "%Y-%m-%d %H:%M:%S")
                end_time = datetime.strptime(f"{llm_response.date} 23:59:59", "%Y-%m-%d %H:%M:%S")
                
                event_id = db.save_event(
                    user_id=user_id,
                    description=llm_response.description,
                    start_time=start_time,
                    end_time=end_time,
                    priority=llm_response.priority,
                    is_all_day=True,
                    goal_id=goal_id
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                if event_id == -1:
                    logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –ø—Ä–æ–ø—É—â–µ–Ω: {llm_response.description}")
                    return {
                        "success": True,
                        "message": f"–°–æ–±—ã—Ç–∏–µ '{llm_response.description}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
                        "event_id": None,
                        "is_all_day": True,
                        "duplicate": True
                    }

                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, ID: {event_id}")

                return {
                    "success": True,
                    "message": f"–°–æ–±—ã—Ç–∏–µ '{llm_response.description}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {llm_response.date}",
                    "event_id": event_id,
                    "is_all_day": True
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å: {e}")
                return {
                    "success": False,
                    "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: {e}",
                    "is_all_day": True
                }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        start_time = datetime.strptime(
            f"{llm_response.date} {llm_response.time}", "%Y-%m-%d %H:%M:%S"
        )
        if llm_response.end_time:
            end_time = datetime.strptime(
                f"{llm_response.date} {llm_response.end_time}", "%Y-%m-%d %H:%M:%S"
            )
            # –ï—Å–ª–∏ –∫–æ–Ω–µ—Ü —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            if end_time <= start_time:
                end_time += timedelta(days=1)
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏–µ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å
            end_time = start_time + timedelta(hours=1)

        try:
            event_id = db.save_event(
                user_id=user_id,
                description=llm_response.description,
                start_time=start_time,
                end_time=end_time,
                priority=llm_response.priority,
                is_all_day=False,
                goal_id=goal_id
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            if event_id == -1:
                logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–ø—É—â–µ–Ω: {llm_response.description}")
                return {
                    "success": True,
                    "message": f"–°–æ–±—ã—Ç–∏–µ '{llm_response.description}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
                    "event_id": None,
                    "is_all_day": False,
                    "duplicate": True
                }

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ —Å–æ–±—ã—Ç–∏—è
            scheduler_instance.schedule_event_notification(user_id, event_id, start_time)

            return {
                "success": True,
                "message": (
                    f"–°–æ–±—ã—Ç–∏–µ '{llm_response.description}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {llm_response.date} "
                    f"{start_time.strftime('%H:%M')}‚Äì{end_time.strftime('%H:%M')}" if end_time > start_time else
                    f"–°–æ–±—ã—Ç–∏–µ '{llm_response.description}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {llm_response.date} {start_time.strftime('%H:%M')}"
                ),
                "event_id": event_id,
                "is_all_day": False
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º: {e}")
            return {
                "success": False,
                "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: {e}",
                "is_all_day": False
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_instance = Scheduler()