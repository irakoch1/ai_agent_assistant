import psycopg2
from config import Config
from datetime import datetime, timedelta
from typing import Optional, List, Tuple
from models import EventConflict
import logging

logger = logging.getLogger(__name__)

class Database:
    def __init__(self):
        self.conn = None
        self.connect()
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ –∫–æ–ª–æ–Ω–æ–∫
        self.table_users = "users"
        self.table_events = "events"
        self.column_user_id = "user_id"
        self.column_name = "name"
        self.column_description = "description_event"
        self.column_start_time = "start_time"
        self.column_end_time = "end_time"
        self.column_is_all_day = "is_all_day"
        self.column_priority = "priority_event"
        self.column_status = "status"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        self.check_table_structure()

    def connect(self):
        try:
            if Config.DATABASE_URL:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–ª—è Render –∏ –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
                # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å SSL –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
                self.conn = psycopg2.connect(
                    Config.DATABASE_URL,
                    sslmode='require'  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –æ–±–ª–∞—á–Ω—ã–º –ë–î
                )
            else:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
                self.conn = psycopg2.connect(
                    host=Config.DB_HOST,
                    port=Config.DB_PORT,
                    dbname=Config.DB_NAME,
                    user=Config.DB_USER,
                    password=Config.DB_PASSWORD,
                    sslmode='prefer'  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ SSL-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def check_table_structure(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã events"""
        try:
            query = """
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'events'
            """
            
            with self.conn.cursor() as cur:
                cur.execute(query)
                columns = cur.fetchall()
                
            logger.info("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü–∞ events:")
            for column in columns:
                logger.info(f"  {column[0]} ({column[1]}, nullable: {column[2]})")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")

    def check_time_conflict(
        self, user_id: int, event_date: str, event_time: str, duration_minutes: int = 30
    ) -> EventConflict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"
        logger.info("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return EventConflict(is_conflict=False)

    def save_event(
        self,
        user_id: int,
        description: str,
        start_time: datetime = None,
        end_time: datetime = None,
        priority: int = 2,
        is_all_day: bool = False,
        goal_id: int = None
    ) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if start_time:
                duplicate_check = f"""
                SELECT COUNT(*) FROM {self.table_events} 
                WHERE {self.column_user_id} = %s 
                AND {self.column_description} = %s 
                AND {self.column_start_time} = %s
                """
                with self.conn.cursor() as cur:
                    cur.execute(duplicate_check, (user_id, description, start_time))
                    count = cur.fetchone()[0]
                    if count > 0:
                        logger.warning(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {description}")
                        return -1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–∞
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            status = '–∞–∫—Ç–∏–≤–Ω–æ'
            
            query = f"""
            INSERT INTO {self.table_events} 
            ({self.column_user_id}, goal_id, {self.column_description}, {self.column_start_time}, {self.column_end_time}, {self.column_priority}, {self.column_is_all_day}, {self.column_status}) 
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING event_id
            """

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î: user_id={user_id}, description='{description}', "
                       f"start_time={start_time}, end_time={end_time}, priority={priority}, is_all_day={is_all_day}, status={status}")

            with self.conn.cursor() as cur:
                cur.execute(
                    query, (user_id, goal_id, description, start_time, end_time, priority, is_all_day, status)
                )
                event_id = cur.fetchone()[0]
                self.conn.commit()

            logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, ID: {event_id}")
            return event_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            self.conn.rollback()
            raise

    def get_user_events(
        self, user_id: int, start_date: datetime, end_date: datetime
    ) -> List[Tuple]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            query = f"""
            SELECT event_id, {self.column_description}, {self.column_start_time}, 
                   {self.column_end_time}, {self.column_priority}, {self.column_is_all_day}
            FROM {self.table_events} 
            WHERE {self.column_user_id} = %s 
            AND ({self.column_start_time} IS NULL OR {self.column_start_time} BETWEEN %s AND %s)
            ORDER BY {self.column_start_time} NULLS LAST
            """

            with self.conn.cursor() as cur:
                cur.execute(query, (user_id, start_date, end_date))
                events = cur.fetchall()
                logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return events
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []

    def user_exists(self, user_id: int, username: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç"""
        try:
            query = f"SELECT {self.column_user_id} FROM {self.table_users} WHERE {self.column_user_id} = %s"
            with self.conn.cursor() as cur:
                cur.execute(query, (user_id,))
                if not cur.fetchone():
                    insert_query = f"INSERT INTO {self.table_users} ({self.column_user_id}, {self.column_name}) VALUES (%s, %s)"
                    cur.execute(insert_query, (user_id, username))
                    self.conn.commit()
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} - {username}")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self.conn.rollback()

    def delete_event(self, user_id: int, description: str, date: str = None) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏ –¥–∞—Ç–µ"""
        try:
            if date:
                query = f"""
                DELETE FROM {self.table_events} 
                WHERE {self.column_user_id} = %s 
                AND {self.column_description} ILIKE %s 
                AND {self.column_start_time}::date = %s
                """
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è, –∞ –Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ
                params = (user_id, f"%{description}%", date)
            else:
                query = f"""
                DELETE FROM {self.table_events} 
                WHERE {self.column_user_id} = %s 
                AND {self.column_description} ILIKE %s
                """
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è, –∞ –Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ
                params = (user_id, f"%{description}%")

            with self.conn.cursor() as cur:
                cur.execute(query, params)
                deleted_count = cur.rowcount
                self.conn.commit()

            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º '{description}'")
            return deleted_count > 0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            self.conn.rollback()
            return False

    def clear_user_events(self, user_id: int) -> int:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = f"""
            DELETE FROM {self.table_events} 
            WHERE {self.column_user_id} = %s
            """

            with self.conn.cursor() as cur:
                cur.execute(query, (user_id,))
                deleted_count = cur.rowcount
                self.conn.commit()

            return deleted_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self.conn.rollback()
            return 0

    def get_all_users(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            query = f"SELECT {self.column_user_id} FROM {self.table_users}"
            with self.conn.cursor() as cur:
                cur.execute(query)
                users = [row[0] for row in cur.fetchall()]
                logger.info(f"üë• –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î")
                return users
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def get_event_by_id(self, event_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
        try:
            query = f"""
            SELECT event_id, {self.column_description}, {self.column_start_time}, 
                   {self.column_end_time}, {self.column_priority}, {self.column_is_all_day}
            FROM {self.table_events} 
            WHERE event_id = %s
            """
            with self.conn.cursor() as cur:
                cur.execute(query, (event_id,))
                event = cur.fetchone()
                if event:
                    logger.info(f"üìù –°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID {event_id}: {event[1]}")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return event
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            return None

    def check_event_exists(self, user_id: int, description: str, date: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ"""
        try:
            query = f"""
            SELECT COUNT(*) FROM {self.table_events} 
            WHERE {self.column_user_id} = %s 
            AND {self.column_description} ILIKE %s 
            AND {self.column_start_time}::date = %s
            """
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: user_id={user_id}, description='{description}', date={date}")
            
            with self.conn.cursor() as cur:
                cur.execute(query, (user_id, f"%{description}%", date))
                count = cur.fetchone()[0]
                
            exists = count > 0
            logger.info(f"üìä –°–æ–±—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î: {exists} (–Ω–∞–π–¥–µ–Ω–æ {count} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)")
            return exists
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
            return False

    def save_goal(self, user_id: int, description: str, priority: int = 2) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            query = f"""
            INSERT INTO goals 
            (user_id, description_goal, priority_goal) 
            VALUES (%s, %s, %s)
            RETURNING goal_id
            """

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤ –ë–î: user_id={user_id}, description='{description}', priority={priority}")

            with self.conn.cursor() as cur:
                cur.execute(query, (user_id, description, priority))
                goal_id = cur.fetchone()[0]
                self.conn.commit()

            logger.info(f"‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, ID: {goal_id}")
            return goal_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏: {e}")
            self.conn.rollback()
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()