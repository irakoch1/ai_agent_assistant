#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
"""
import sys
sys.path.append(".")

from database import db
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

def test_schedule_display():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π user_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ë–î
    test_user_id = 891351808  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        start_date = datetime.now() - timedelta(days=1)
        end_date = datetime.now() + timedelta(days=30)
        
        print(f"üìÖ –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è —Å {start_date} –ø–æ {end_date}")
        
        events = db.get_user_events(test_user_id, start_date, end_date)
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        
        if events:
            print("\nüìù –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:")
            for i, event in enumerate(events):
                print(f"  {i+1}. {event}")
        else:
            print("üì≠ –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î...")
            try:
                with db.conn.cursor() as cur:
                    cur.execute("SELECT COUNT(*) FROM events")
                    total_events = cur.fetchone()[0]
                    print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –ë–î: {total_events}")
                    
                    if total_events > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                        cur.execute("SELECT user_id, description_event, start_time FROM events ORDER BY event_id DESC LIMIT 10")
                        recent_events = cur.fetchall()
                        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
                        for event in recent_events:
                            print(f"  User: {event[0]}, Desc: {event[1]}, Time: {event[2]}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        print(f"\nüîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è user_id = {test_user_id}:")
                        cur.execute("SELECT user_id, description_event, start_time FROM events WHERE user_id = %s ORDER BY event_id DESC LIMIT 5", (test_user_id,))
                        user_events = cur.fetchall()
                        if user_events:
                            print("üìã –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                            for event in user_events:
                                print(f"  User: {event[0]}, Desc: {event[1]}, Time: {event[2]}")
                        else:
                            print("üì≠ –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π")
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        cur.execute("SELECT DISTINCT user_id FROM events")
                        all_users = cur.fetchall()
                        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î: {[u[0] for u in all_users]}")
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_schedule_display()
